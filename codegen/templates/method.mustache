/**
 * {{&summary}}
 * @method
 * @param {object} parameters - method options and parameters
{{#parameters}}
  {{^isSingleton}} * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{^isPathParameter}}parameters.{{/isPathParameter}}{{&camelCaseName}} - {{&description}}{{/isSingleton}}
{{/parameters}}
 */
 {{&methodName}}({{#parameters}}{{#isPathParameter}}{{&camelCaseName}},{{/isPathParameter}}{{/parameters}}parameters = {}) {
  let path = '{{&path}}';
  let body = {};
  let queryParameters = {};
  let headers = {};
  let form = {};

  {{#isSecure}}
    headers = Object.assign({}, headers, this.setAuthHeaders(headers));
  {{/isSecure}}
  {{#headers}}
    headers['{{&name}}'] = [{{&value}}];
  {{/headers}}

  {{#parameters}}
    {{#isQueryParameter}}
      {{#isSingleton}}
        queryParameters['{{&name}}'] = '{{&singleton}}';
      {{/isSingleton}}
      {{^isSingleton}}
        {{#isPatternType}}
          Object.keys(parameters).forEach(function(parameterName) {
            if(new RegExp('{{&pattern}}').test(parameterName)){
              queryParameters[parameterName] = parameters[parameterName];
            }
          });
        {{/isPatternType}}
        {{#default}}
          /** set default value **/
          queryParameters['{{&name}}'] = '{{&default}}';
        {{/default}}

        {{^isPatternType}}
        if(parameters['{{&camelCaseName}}'] !== undefined){
          queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}'];
        }
        {{/isPatternType}}
      {{/isSingleton}}
    {{/isQueryParameter}}
    
    {{#isPathParameter}}
      path = path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', {{&camelCaseName}});
    {{/isPathParameter}}
    
    {{#isBodyParameter}}
      if(parameters['{{&camelCaseName}}'] !== undefined){
        body = parameters['{{&camelCaseName}}'];
      }
    {{/isBodyParameter}}

    {{#isFormParameter}}
      {{#isSingleton}}
        form['{{&name}}'] = '{{&singleton}}';
      {{/isSingleton}}
      {{^isSingleton}}
        if(parameters['{{&camelCaseName}}'] !== undefined){
            form['{{&name}}'] = parameters['{{&camelCaseName}}'];
        }
      {{/isSingleton}}
    {{/isFormParameter}}

    {{#required}}
      {{^isPathParameter}}
        if(parameters['{{&camelCaseName}}'] === undefined) {
          throw Error('Missing required {{&paramType}} parameter: {{&camelCaseName}}');
        }
      {{/isPathParameter}}
    {{/required}}
 
  {{/parameters}}
  queryParameters = this.mergeQueryParams(parameters, queryParameters);

  return this.request('{{method}}', `${this.baseUrl}${path}`, body, headers, queryParameters, form);
 }

